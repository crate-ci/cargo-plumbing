use cargo_plumbing_schemas::read_lockfile::ReadLockfileOut;
use cargo_test_macro::cargo_test;
use cargo_test_support::compare::assert_e2e;
use cargo_test_support::registry::{Package, RegistryBuilder};
use cargo_test_support::{basic_lib_manifest, basic_manifest, git, project, str};

use crate::{assert_not_exists, ProjectExt};

#[cargo_test]
fn package_with_deps() {
    Package::new("a", "1.0.0").publish();
    Package::new("b", "1.0.0").publish();

    let p = project()
        .file("src/lib.rs", "")
        .file(
            "Cargo.toml",
            r#"
                [package]
                name = "read-lockfile-test"
                version = "0.1.0"
                authors = []
                edition = "2024"

                [dependencies]
                a = "1.0.0"
                b = "1.0.0"
            "#,
        )
        .build();

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .with_stdin(stdout)
        .with_status(0)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[""]])
        .run();

    assert_e2e().eq(
        p.read_lockfile(),
        str![[r##"
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "a"
version = "1.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3a351dafbc8a3a9cba7c06dfe8caa11a3a45f800a336bb5b913a8f1e2652d454"

[[package]]
name = "b"
version = "1.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "909035bb08757fa6f58bf655da5337acb736003f7301533602d348a329097837"

[[package]]
name = "read-lockfile-test"
version = "0.1.0"
dependencies = [
 "a",
 "b",
]

"##]],
    );
}

#[cargo_test]
fn package_with_transitive_deps() {
    Package::new("a", "1.0.0").publish();
    Package::new("b", "1.0.0").dep("a", "1.0.0").publish();

    let p = project()
        .file("src/lib.rs", "")
        .file(
            "Cargo.toml",
            r#"
                [package]
                name = "read-lockfile-test"
                version = "0.1.0"
                authors = []
                edition = "2024"

                [dependencies]
                a = "1.0.0"
                b = "1.0.0"
            "#,
        )
        .build();

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .with_stdin(stdout)
        .with_status(0)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[""]])
        .run();

    assert_e2e().eq(
        p.read_lockfile(),
        str![[r##"
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "a"
version = "1.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3a351dafbc8a3a9cba7c06dfe8caa11a3a45f800a336bb5b913a8f1e2652d454"

[[package]]
name = "b"
version = "1.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee3b274199c39817bfb6018e6cbe07ca43dd18241c42400d800e2545b77fb23b"
dependencies = [
 "a",
]

[[package]]
name = "read-lockfile-test"
version = "0.1.0"
dependencies = [
 "a",
 "b",
]

"##]],
    );
}

#[cargo_test]
fn package_with_path_deps() {
    let p = project()
        .file("a/src/lib.rs", "")
        .file(
            "a/Cargo.toml",
            r#"
                [package]
                name = "a"
                version = "0.1.0"
                authors = []
                edition = "2024"
            "#,
        )
        .file("src/lib.rs", "")
        .file(
            "Cargo.toml",
            r#"
                [package]
                name = "read-lockfile-test"
                version = "0.1.0"
                authors = []
                edition = "2024"

                [dependencies]
                a = { path = "./a" }
            "#,
        )
        .build();

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .with_stdin(stdout)
        .with_status(0)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[""]])
        .run();

    assert_e2e().eq(
        p.read_lockfile(),
        str![[r##"
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "a"
version = "0.1.0"

[[package]]
name = "read-lockfile-test"
version = "0.1.0"
dependencies = [
 "a",
]

"##]],
    );
}

#[cargo_test]
fn package_with_git_deps_with_previous_lockfile() {
    let (git_p, git_r) = git::new_repo("my-git-repo", |p| {
        p.file("Cargo.toml", &basic_manifest("a", "1.0.0"))
            .file("src/lib.rs", "")
    });

    let ref_1 = "v1.0.0";
    git::tag(&git_r, ref_1);

    let branch_name = "master";
    let url = git_p.url();

    let locked_commit_hash = git_r.head().unwrap().target().unwrap().to_string();

    let p = project()
        .file("a/src/lib.rs", "")
        .file(
            "a/Cargo.toml",
            r#"
                [package]
                name = "a"
                version = "1.0.0"
                authors = []
                edition = "2024"
            "#,
        )
        .file("src/lib.rs", "")
        .file(
            "Cargo.toml",
            &format!(
                r#"
                    [package]
                    name = "read-lockfile-test"
                    version = "0.1.0"
                    authors = []
                    edition = "2024"

                    [dependencies]
                    a1 = {{ package = "a", git = "{url}", rev = "{ref_1}" }}
                    a2 = {{ package = "a", git = "{url}" }}
                    a3 = {{ package = "a", git = "{url}", branch = "{branch_name}" }}
                "#,
            ),
        )
        .build();

    p.cargo_global("generate-lockfile").run();

    git_p.change_file("src/lib.rs", "# simulate change");
    git::commit(&git_r);

    let out = p
        .cargo_plumbing("plumbing read-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .run();
    let previous_lock: String = ReadLockfileOut::parse_stream(&*out.stdout)
        .filter_map(Result::ok)
        .filter(|msg| {
            matches!(
                msg,
                ReadLockfileOut::LockedPackage { .. } | ReadLockfileOut::UnusedPatches { .. }
            )
        })
        .map(|msg| serde_json::to_string(&msg))
        .collect::<Result<Vec<_>, _>>()
        .unwrap()
        .join("\n");

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .with_stdin(previous_lock)
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .with_stdin(stdout)
        .with_status(0)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[""]])
        .run();

    let lockfile_value = r##"# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "a"
version = "1.0.0"
source = "git+[ROOTURL]/my-git-repo?branch=master#REV"

[[package]]
name = "a"
version = "1.0.0"
source = "git+[ROOTURL]/my-git-repo?rev=v1.0.0#REV"

[[package]]
name = "a"
version = "1.0.0"
source = "git+[ROOTURL]/my-git-repo#REV"

[[package]]
name = "read-lockfile-test"
version = "0.1.0"
dependencies = [
 "a 1.0.0 (git+[ROOTURL]/my-git-repo?branch=master)",
 "a 1.0.0 (git+[ROOTURL]/my-git-repo?rev=v1.0.0)",
 "a 1.0.0 (git+[ROOTURL]/my-git-repo)",
]
"##
    .replace("REV", &locked_commit_hash);

    assert_e2e().eq(p.read_lockfile(), lockfile_value);
}

#[cargo_test]
fn package_with_varying_deps_sources() {
    Package::new("a", "1.0.0").publish();
    Package::new("a", "2.0.0").publish();

    let _registry = RegistryBuilder::new().http_index().alternative().build();
    Package::new("a", "1.0.0").alternative(true).publish();

    let ref_1 = "v1.0.0";
    let ref_2 = "v2.0.0";
    let url = {
        let (p, r) = git::new_repo("my-git-repo", |p| {
            p.file("Cargo.toml", &basic_manifest("a", "1.0.0"))
                .file("src/lib.rs", "")
        });

        git::tag(&r, ref_1);

        p.change_file("Cargo.toml", &basic_manifest("a", "2.0.0"));
        git::add(&r);
        git::commit(&r);
        git::tag(&r, ref_2);

        p.url()
    };

    let p = project()
        .file("a/src/lib.rs", "")
        .file(
            "a/Cargo.toml",
            r#"
                [package]
                name = "a"
                version = "1.0.0"
                authors = []
                edition = "2024"
            "#,
        )
        .file("src/lib.rs", "")
        .file(
            "Cargo.toml",
            &format!(
                r#"
                    [package]
                    name = "read-lockfile-test"
                    version = "0.1.0"
                    authors = []
                    edition = "2024"

                    [dependencies]
                    a  = {{ path = "./a" }}
                    a1 = {{ package = "a", version = "1.0.0" }}
                    a2 = {{ package = "a", version = "2.0.0" }}
                    a3 = {{ package = "a", git = "{url}", rev = "{ref_1}" }}
                    a4 = {{ package = "a", git = "{url}", rev = "{ref_2}" }}
                    a5 = {{ package = "a", git = "{url}" }}
                    a6 = {{ package = "a", version = "1.0.0", registry = "alternative" }}
                "#,
            ),
        )
        .build();

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .with_stdin(stdout)
        .with_status(0)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[""]])
        .run();

    assert_e2e().eq(
        p.read_lockfile(),
        str![[r##"
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "a"
version = "1.0.0"

[[package]]
name = "a"
version = "1.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3a351dafbc8a3a9cba7c06dfe8caa11a3a45f800a336bb5b913a8f1e2652d454"

[[package]]
name = "a"
version = "1.0.0"
source = "sparse+http://127.0.0.1:[..]/index/"
checksum = "3a351dafbc8a3a9cba7c06dfe8caa11a3a45f800a336bb5b913a8f1e2652d454"

[[package]]
name = "a"
version = "1.0.0"
source = "git+[ROOTURL]/my-git-repo?rev=v1.0.0#[..]"

[[package]]
name = "a"
version = "2.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "50bc2065af6476063cea5b8d28dc20df4c7ad146759b4712b5e86a6d25d74ddc"

[[package]]
name = "a"
version = "2.0.0"
source = "git+[ROOTURL]/my-git-repo?rev=v2.0.0#[..]"

[[package]]
name = "a"
version = "2.0.0"
source = "git+[ROOTURL]/my-git-repo#[..]"

[[package]]
name = "read-lockfile-test"
version = "0.1.0"
dependencies = [
 "a 1.0.0",
 "a 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
 "a 1.0.0 (sparse+http://127.0.0.1:[..]/index/)",
 "a 1.0.0 (git+[ROOTURL]/my-git-repo?rev=v1.0.0)",
 "a 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
 "a 2.0.0 (git+[ROOTURL]/my-git-repo?rev=v2.0.0)",
 "a 2.0.0 (git+[ROOTURL]/my-git-repo)",
]

"##]],
    );
}

#[cargo_test]
fn package_with_unused_patches() {
    Package::new("a", "1.0.0").publish();

    let p = project()
        .file("a/src/lib.rs", "")
        .file(
            "a/Cargo.toml",
            r#"
                [package]
                name = "a"
                version = "2.0.0"
                authors = []
                edition = "2024"
            "#,
        )
        .file("src/lib.rs", "")
        .file(
            "Cargo.toml",
            r#"
                [package]
                name = "read-lockfile-test"
                version = "0.1.0"
                authors = []
                edition = "2024"

                [dependencies]
                a = "1.0.0"

                [patch.crates-io]
                a = { path = "a" }
            "#,
        )
        .build();

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .with_stdin(stdout)
        .with_status(0)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[""]])
        .run();

    assert_e2e().eq(
        p.read_lockfile(),
        str![[r##"
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "a"
version = "1.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3a351dafbc8a3a9cba7c06dfe8caa11a3a45f800a336bb5b913a8f1e2652d454"

[[package]]
name = "read-lockfile-test"
version = "0.1.0"
dependencies = [
 "a",
]

[[patch.unused]]
name = "a"
version = "2.0.0"

"##]],
    );
}

#[cargo_test]
fn workspace_member_with_inherited_deps() {
    Package::new("a", "1.0.0").publish();
    Package::new("b", "1.0.0").publish();

    let p = project()
        .file(
            "Cargo.toml",
            r#"
                [workspace]
                resolver = "3"
                members = ["crate1"]

                [workspace.dependencies]
                a = "1.0.0"
                b = "1.0.0"
            "#,
        )
        .file("crate1/src/lib.rs", "")
        .file(
            "crate1/Cargo.toml",
            r#"
                [package]
                name = "crate1"
                version = "0.1.0"
                authors = []
                edition = "2024"

                [dependencies]
                a.workspace = true
                b.workspace = true
            "#,
        )
        .build();

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .with_stdin(stdout)
        .with_status(0)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[""]])
        .run();

    assert_e2e().eq(
        p.read_lockfile(),
        str![[r##"
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "a"
version = "1.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3a351dafbc8a3a9cba7c06dfe8caa11a3a45f800a336bb5b913a8f1e2652d454"

[[package]]
name = "b"
version = "1.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "909035bb08757fa6f58bf655da5337acb736003f7301533602d348a329097837"

[[package]]
name = "crate1"
version = "0.1.0"
dependencies = [
 "a",
 "b",
]

"##]],
    );
}

#[cargo_test]
fn workspace_package_depend_on_workspace_member() {
    Package::new("a", "1.0.0").publish();

    let p = project()
        .file("src/lib.rs", "")
        .file(
            "Cargo.toml",
            r#"
                [workspace]
                resolver = "3"
                members = ["crate1"]

                [package]
                name = "read-lockfile-test"
                version = "0.1.0"
                authors = []
                edition = "2024"

                [dependencies]
                crate1 = { path = "./crate1" }
                a = "1.0.0"
            "#,
        )
        .file("crate1/src/lib.rs", "")
        .file(
            "crate1/Cargo.toml",
            r#"
                [package]
                name = "crate1"
                version = "0.1.0"
                authors = []
                edition = "2024"
            "#,
        )
        .build();

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .with_stdin(stdout)
        .with_status(0)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[""]])
        .run();

    assert_e2e().eq(
        p.read_lockfile(),
        str![[r##"
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "a"
version = "1.0.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "3a351dafbc8a3a9cba7c06dfe8caa11a3a45f800a336bb5b913a8f1e2652d454"

[[package]]
name = "crate1"
version = "0.1.0"

[[package]]
name = "read-lockfile-test"
version = "0.1.0"
dependencies = [
 "a",
 "crate1",
]

"##]],
    );
}

#[cargo_test]
fn invalid_lockfile_name() {
    let p = project()
        .file("src/lib.rs", "")
        .file(
            "Cargo.toml",
            r#"
                [package]
                name = "write-lockfile-tests"
                version = "0.1.0"
                authors = []
                edition = "2024"
            "#,
        )
        .build();

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("invalid-Cargo.lock"))
        .with_stdin(stdout)
        .with_status(101)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[r#"
[ERROR] lockfile name should be `Cargo.lock`

"#]])
        .run();

    assert_not_exists(&p.root().join("invalid-Cargo.lock"));
    assert_not_exists(&p.root().join("Cargo.lock"));
}

#[cargo_test]
fn v3_and_git_url_encoded() {
    let (git_project, repo) = git::new_repo("dep1", |project| {
        project
            .file("Cargo.toml", &basic_lib_manifest("dep1"))
            .file("src/lib.rs", "")
    });
    let url = git_project.url();
    let head_id = repo.head().unwrap().target().unwrap();

    let ref_kind = "branch";
    let git_ref = "a-_+#$)";
    repo.branch(git_ref, &repo.find_commit(head_id).unwrap(), true)
        .unwrap();

    let lockfile = format!(
        r#"# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 3

[[package]]
name = "dep1"
version = "0.5.0"
source = "git+[ROOTURL]/dep1?{ref_kind}={git_ref}#{head_id}"

[[package]]
name = "foo"
version = "0.0.1"
dependencies = [
 "dep1",
]
"#,
    );

    let p = project()
        .file(
            "Cargo.toml",
            &format!(
                r#"
                    [package]
                    name = "foo"
                    version = "0.0.1"
                    edition = "2015"
                    rust-version = "1.81" # ensure it stays in lockfile v3

                    [dependencies]
                    dep1 = {{ git = '{url}', {ref_kind} = '{git_ref}' }}
                "#,
            ),
        )
        .file("src/lib.rs", "")
        .file("Cargo.lock", "version = 3")
        .build();

    let out = p
        .cargo_plumbing("plumbing read-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .run();
    let previous_lock: String = ReadLockfileOut::parse_stream(&*out.stdout)
        .filter_map(Result::ok)
        .filter(|msg| {
            matches!(
                msg,
                ReadLockfileOut::LockedPackage { .. } | ReadLockfileOut::UnusedPatches { .. }
            )
        })
        .map(|msg| serde_json::to_string(&msg))
        .collect::<Result<Vec<_>, _>>()
        .unwrap()
        .join("\n");

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .with_stdin(previous_lock)
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .with_stdin(stdout)
        .with_status(0)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[""]])
        .run();

    let lock = p.read_lockfile();
    assert_e2e().eq(&lock, &lockfile);
}

#[cargo_test]
fn v4_and_git_url_encoded() {
    let (git_project, repo) = git::new_repo("dep1", |project| {
        project
            .file("Cargo.toml", &basic_lib_manifest("dep1"))
            .file("src/lib.rs", "")
    });
    let url = git_project.url();
    let head_id = repo.head().unwrap().target().unwrap();

    let ref_kind = "branch";
    let git_ref = "a-_+#$)";
    let encoded_ref = "a-_%2B%23%24%29";
    repo.branch(git_ref, &repo.find_commit(head_id).unwrap(), true)
        .unwrap();

    let lockfile = format!(
        r#"# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 4

[[package]]
name = "dep1"
version = "0.5.0"
source = "git+[ROOTURL]/dep1?{ref_kind}={encoded_ref}#{head_id}"

[[package]]
name = "foo"
version = "0.0.1"
dependencies = [
 "dep1",
]
"#,
    );

    let p = project()
        .file(
            "Cargo.toml",
            &format!(
                r#"
                    [package]
                    name = "foo"
                    version = "0.0.1"
                    edition = "2015"

                    [dependencies]
                    dep1 = {{ git = '{url}', {ref_kind} = '{git_ref}' }}
                "#,
            ),
        )
        .file("src/lib.rs", "")
        .file("Cargo.lock", "version = 4")
        .build();

    let out = p
        .cargo_plumbing("plumbing read-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .run();
    let previous_lock: String = ReadLockfileOut::parse_stream(&*out.stdout)
        .filter_map(Result::ok)
        .filter(|msg| {
            matches!(
                msg,
                ReadLockfileOut::LockedPackage { .. } | ReadLockfileOut::UnusedPatches { .. }
            )
        })
        .map(|msg| serde_json::to_string(&msg))
        .collect::<Result<Vec<_>, _>>()
        .unwrap()
        .join("\n");

    let out = p
        .cargo_plumbing("plumbing lock-dependencies")
        .arg("--manifest-path")
        .arg(p.root().join("Cargo.toml"))
        .with_stdin(previous_lock)
        .run();
    let stdout = String::from_utf8(out.stdout).unwrap();

    p.cargo_plumbing("plumbing write-lockfile")
        .arg("--lockfile-path")
        .arg(p.root().join("Cargo.lock"))
        .with_stdin(stdout)
        .with_status(0)
        .with_stdout_data(str![[""]])
        .with_stderr_data(str![[""]])
        .run();

    let lock = p.read_lockfile();
    assert_e2e().eq(&lock, &lockfile);
}
